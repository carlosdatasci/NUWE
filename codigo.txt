## Carga librerías


## Tratamiento de datos
##----------------------------------------------------------------
import pandas as pd
import numpy as np

import missingno as msno 

import pandas_profiling as pp

## Visualización de datos
##----------------------------------------------------------------
%matplotlib inline
import matplotlib.pyplot as plt

import seaborn as sns

# Carga del dataset

df = pd.read_csv('mwc22-client_table.csv', sep = ',')

# Check first line
df.head()

# Check last line
#df.tail()

# En la información general se pueden ver la cantidad de líneas que tiene el documento y el formato de dato de cada
# una de las columnas, donde se encuentran dos tipos. También se puede observar que no hay datos nulos. 
df.info()

# Como se ha visto en la información, los números decimales se consideran objetos, se deben convertir a valor "float"
# para poder trabajar con ellos. 

# Para poder convertir los valores a "float" previamente hay que substituir las "," por ".".
df["AVG CONSO"] = (df["AVG CONSO"]
                         .str.extract(r"([\d,\.]+)", expand=False)
                         .str.replace(",", ".")
                         .astype(float))

df["AVG BASKET SIZE"] = (df["AVG BASKET SIZE"]
                         .str.extract(r"([\d,\.]+)", expand=False)
                         .str.replace(",", ".")
                         .astype(float))

# A continuación se transforman los datos de las columnas al formato "float".

df["AVG CONSO"] = (df["AVG CONSO"].astype(float))
df["AVG BASKET SIZE"] = (df["AVG BASKET SIZE"].astype(float))

# Se agrufa el consumo medio por segmento y se guardan los datos en dos listas.
grouped = df.groupby("CLIENT_SEGMENT")
lista_grupo = []
lista_avg_conso = []
for name, group in grouped:
    lista_grupo.append(name)
    lista_avg_conso.append(np.mean(group["AVG CONSO"]))

# Se representa con un gráfico de barras el consumo medio por segmento.
plt.figure(figsize=(9, 3))
plt.bar(lista_grupo, lista_avg_conso)
plt.suptitle('Consumo medio por segmento')
plt.show()

# Se agrupa el tamaño medio de la cesta por segmento y se guardan los datos en dos listas.
grouped2 = df.groupby("CLIENT_SEGMENT")
lista_grupo_2 = []
lista_avg_basket = []
for name, group in grouped2:
    lista_grupo_2.append(name)
    lista_avg_basket.append(np.mean(group["AVG BASKET SIZE"]))

# Se representa con un gráfico de barras el tamaño medio de la cesta por segmento.
plt.figure(figsize=(9, 3))
plt.bar(lista_grupo_2, lista_avg_basket)
plt.suptitle('Tamaño medio de la cesta por segmento')
plt.show()

# En general se puede observar que a mayor tamaño medio de la cesta, mayor consumo de producto. 

# Se agrufa el consumo medio por segmento y se guardan los datos en dos listas.
grouped3 = df.groupby("RECEIVED_COMMUNICATION")
lista_grupo_3 = []
lista_avg_conso_promo = []
for name, group in grouped3:
    lista_grupo_3.append(name)
    lista_avg_conso_promo.append(np.mean(group["AVG CONSO"]))

# Se representa con un gráfico de barras el consumo medio mensual en función de si el cliente recibio promoción de sus
# productos.
plt.figure(figsize=(9, 3))
plt.bar(lista_grupo_3, lista_avg_conso_promo)
plt.suptitle('Consumo medio mensual en base a promoción')
plt.show()

# Se puede observar que los clientes con promoción han consumido mayor cantidad de fruta.

# Ahora se procederá a analizar los datos del dataset "mwc22-orders_table" con el objetivo de conocer cuales son las
# frutas más consumidas por cada segmento. 

# Primero se cargan los datos en un dataframe y se observa que se carguen correctamente.

df2 = pd.read_csv('mwc22-orders_table.csv', sep = ',')

# Check primeras líneas.
df2.head()

# Check últimas líneas
#df2.tail()

# En la información general se pueden ver la cantidad de líneas que tiene el documento y el formato de dato de cada
# una de las columnas, donde se encuentran dos tipos. También se puede observar que no hay datos nulos. 
df2.info()

# Se realiza la unión del dataframe cliente con el dataframde de las órdenes, con la intención de ver que frutas se consumen más
# en cada segmento.
df3 = pd.merge(df, df2, how='inner')
df3.head()
# Primeo se filtran los datos por segmento y posteriormente por tipo de fruta, para así sumar la cantidad de unidades de cada
# fruta. Primero se extraeran los datos y posteriormente se presentarán los gráficos conjuntamente para facilitar su lectura.

#En este punto se extraen los datos del segmento 1

grouped1 = df3[(df3.CLIENT_SEGMENT == 1)]
grouped1_f = grouped1.groupby(["FRUIT_PRODUCT"])                       
lista_frutas_1 = []
lista_cantidad_1 = []
for name, group in grouped1_f:
    lista_frutas_1.append(name)
    lista_cantidad_1.append(np.sum(group["NB PRODS"]))
    
#En este punto se extraen los datos del segmento 2

grouped2 = df3[(df3.CLIENT_SEGMENT == 2)]
grouped2_f = grouped2.groupby(["FRUIT_PRODUCT"])                       
lista_frutas_2 = []
lista_cantidad_2 = []
for name, group in grouped2_f:
    lista_frutas_2.append(name)
    lista_cantidad_2.append(np.sum(group["NB PRODS"]))

#En este punto se extraen los datos del segmento 3

grouped3 = df3[(df3.CLIENT_SEGMENT == 3)]
grouped3_f = grouped3.groupby(["FRUIT_PRODUCT"])                       
lista_frutas_3 = []
lista_cantidad_3 = []
for name, group in grouped3_f:
    lista_frutas_3.append(name)
    lista_cantidad_3.append(np.sum(group["NB PRODS"]))
    
#En este punto se extraen los datos del segmento 4

grouped4 = df3[(df3.CLIENT_SEGMENT == 4)]
grouped4_f = grouped4.groupby(["FRUIT_PRODUCT"])                       
lista_frutas_4 = []
lista_cantidad_4 = []
for name, group in grouped4_f:
    lista_frutas_4.append(name)
    lista_cantidad_4.append(np.sum(group["NB PRODS"]))

#En este punto se extraen los datos del segmento 5

grouped5 = df3[(df3.CLIENT_SEGMENT == 5)]
grouped5_f = grouped5.groupby(["FRUIT_PRODUCT"])                       
lista_frutas_5 = []
lista_cantidad_5 = []
for name, group in grouped5_f:
    lista_frutas_5.append(name)
    lista_cantidad_5.append(np.sum(group["NB PRODS"]))

#En este punto se extraen los datos del segmento 6

grouped6 = df3[(df3.CLIENT_SEGMENT == 6)]
grouped6_f = grouped6.groupby(["FRUIT_PRODUCT"])                       
lista_frutas_6 = []
lista_cantidad_6 = []
for name, group in grouped6_f:
    lista_frutas_6.append(name)
    lista_cantidad_6.append(np.sum(group["NB PRODS"]))

# Se muestra el gráfico de barras de la fruta consumida en el segmento 1.
fig = plt.figure(figsize=(9, 3))
plt.bar(lista_frutas_1, lista_cantidad_1)
plt.suptitle('Fruta consumida en el Segmento 1')
fig.autofmt_xdate()
plt.show()

# Se muestra el gráfico de barras de la fruta consumida en el segmento 2.
fig = plt.figure(figsize=(9, 3))
plt.bar(lista_frutas_2, lista_cantidad_2)
plt.suptitle('Fruta consumida en el Segmento 2')
fig.autofmt_xdate()
plt.show()

# Se muestra el gráfico de barras de la fruta consumida en el segmento 3.
fig = plt.figure(figsize=(9, 3))
plt.bar(lista_frutas_3, lista_cantidad_3)
plt.suptitle('Fruta consumida en el Segmento 3')
fig.autofmt_xdate()
plt.show()

# Se muestra el gráfico de barras de la fruta consumida en el segmento 4.
fig = plt.figure(figsize=(9, 3))
plt.bar(lista_frutas_4, lista_cantidad_4)
plt.suptitle('Fruta consumida en el Segmento 4')
fig.autofmt_xdate()
plt.show()

# Se muestra el gráfico de barras de la fruta consumida en el segmento 5.
fig = plt.figure(figsize=(9, 3))
plt.bar(lista_frutas_5, lista_cantidad_5)
plt.suptitle('Fruta consumida en el Segmento 5')
fig.autofmt_xdate()
plt.show()

# Se muestra el gráfico de barras de la fruta consumida en el segmento 6.
fig = plt.figure(figsize=(9, 3))
plt.bar(lista_frutas_6, lista_cantidad_6)
plt.suptitle('Fruta consumida en el Segmento 6')
fig.autofmt_xdate()
plt.show()

# Se puede observar que el kiwi y el limón generalmente son los productos más consumidos en todos los segmentos.
# También se puede ver una relación entre el consumo medio del primer gráfico realizado en este ejercicio con las cantidades
# de producto consumidas.

# A continuación se procede con los casos de predicción. Se proponen dos tipos de módelos y se analizará cual da
# mejor resultado, se tiene en cuenta una separación de los datos con "train_test_split" para conseguir una predicción lo
# más certera posible.

# Primer caso, Multinomial Naive Bayes.

column_names = ['AVG CONSO','AVG BASKET SIZE','RECEIVED_COMMUNICATION']

X = df[column_names]
y = df['CLIENT_SEGMENT']

from sklearn.model_selection import train_test_split
Xtrain, Xtest, ytrain, ytest = train_test_split(X, y, random_state=0, train_size=0.7)

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import make_pipeline
model = make_pipeline(MultinomialNB())

model.fit(Xtrain, ytrain)
prediction = model.predict(Xtest)

# Se analiza el resultado con una matriz.
from sklearn.metrics import confusion_matrix
mat = confusion_matrix(ytest, prediction)
sns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)
plt.xlabel('true label')
plt.ylabel('predicted label');

# Segundo caso Random Forest Classifier.

column_names = ['AVG CONSO','AVG BASKET SIZE','RECEIVED_COMMUNICATION']

X = df[column_names]
y = df['CLIENT_SEGMENT']

from sklearn.model_selection import train_test_split
Xtrain, Xtest, ytrain, ytest = train_test_split(X, y, random_state=0, train_size=0.7)

from sklearn.ensemble import RandomForestClassifier
forest = RandomForestClassifier(n_estimators=1000)
forest.fit(Xtrain, ytrain)
prediction = forest.predict(Xtest)

# Se analiza el restulado con un reporte y una matriz.
from sklearn import metrics
print(metrics.classification_report(prediction, ytest))

from sklearn.metrics import confusion_matrix
mat = confusion_matrix(ytest, prediction)
sns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)
plt.xlabel('true label')
plt.ylabel('predicted label');

# Conclusión sobre los casos de predicción. Se puede observar como Random Forest Classifier ofrece una predicción
# con mejores resultados, sin emargo no es capaz de detectar adecuadamente el segmento número 6.

# Ahose se cargará el excel con los datos a predecir.

df4 = pd.read_csv('mwc22-client_table+-+test_x.csv', sep = ',')

# Check primeras líneas.
df4.head()

# Check últimas líneas
#df2.tail()

df4.info()

# Como se ha visto en la información, los números decimales se consideran objetos, se deben convertir a valor "float"
# para poder trabajar con ellos. 

# Para poder convertir los valores a "float" previamente hay que substituir las "," por ".".
df4["AVG CONSO"] = (df4["AVG CONSO"]
                         .str.extract(r"([\d,\.]+)", expand=False)
                         .str.replace(",", ".")
                         .astype(float))

df4["AVG BASKET SIZE"] = (df4["AVG BASKET SIZE"]
                         .str.extract(r"([\d,\.]+)", expand=False)
                         .str.replace(",", ".")
                         .astype(float))

# A continuación se transforman los datos de las columnas al formato "float".

df4["AVG CONSO"] = (df4["AVG CONSO"].astype(float))
df4["AVG BASKET SIZE"] = (df4["AVG BASKET SIZE"].astype(float))

# Se ejecuta la predicción y se genera una nueva columna en el dataframe para ubicar los resultados. 
column_names = ['AVG CONSO','AVG BASKET SIZE','RECEIVED_COMMUNICATION']

X = df[column_names]
y = df['CLIENT_SEGMENT']

X2 = df4[column_names]

from sklearn.ensemble import RandomForestClassifier
forest = RandomForestClassifier(n_estimators=1000)
forest.fit(X, y)
df4['CLIENT_SEGMENT'] = forest.predict(X2)

# A continuación se pueden ver los resultados. 
df4.head(n= 25)

# Se convierten las columnas deseadas en un archivo csv.

selected_columns = df4[["CLIENT ID","CLIENT_SEGMENT"]]
df5 = selected_columns.copy()
df5.head()
df5.to_csv('results.csv')